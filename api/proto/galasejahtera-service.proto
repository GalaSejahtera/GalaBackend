syntax = "proto3";
package pb;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
	    description: "GalaSejahtera Service handles requests from GalaSejahtera application.";
		title: "GalaSejahtera Service";
        version: "1.0.0";
        contact: {
            url: "https://github.com/gala-sejahtera/galasejahtera-be";
            email: "chinxiongwei@yahoo.com.my";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

// GalaSejahtera Backend Service
service GalaSejahteraService {
    // Get Covids
    rpc GetCovids(GetCovidsRequest) returns (GetCovidsResponse){
        option (google.api.http) = {
            get: "/v1/covids"
        };
    }
    // Get Covid
    rpc GetCovid(GetCovidRequest) returns (GetCovidResponse){
        option (google.api.http) = {
            get: "/v1/covids/{id}"
        };
    }
    // Get District
    rpc GetDistrict(GetDistrictRequest) returns (GetDistrictResponse){
        option (google.api.http) = {
            get: "/v1/places/{id}"
        };
    }
    // Get Nearby Users
    rpc GetNearbyUsers(GetNearbyUsersRequest) returns (GetNearbyUsersResponse){
        option (google.api.http) = {
            post: "/v1/client/users/nearby"
            body: "*"
        };
    }
    // Get Covid Kases
    rpc GetKases(google.protobuf.Empty) returns (GetKasesResponse){
        option (google.api.http) = {
            get: "/v1/kases"
        };
    }
    // Get Recent Covid Kases
    rpc GetRecentKases(google.protobuf.Empty) returns (GetRecentKasesResponse){
        option (google.api.http) = {
            get: "/v1/recentkases"
        };
    }
    // Create Report
    rpc CreateReport(CreateReportRequest) returns (CreateReportResponse){
        option (google.api.http) = {
            post: "/v1/reports/{id}"
            body: "*"
        };
    }
    // Get Reports
    rpc GetReports(GetReportsRequest) returns (GetReportsResponse){
        option (google.api.http) = {
            get: "/v1/reports"
        };
    }
    // Get Report
    rpc GetReport(GetReportRequest) returns (GetReportResponse){
        option (google.api.http) = {
            get: "/v1/reports/{id}"
        };
    }
    // Update Report
    rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse){
        option (google.api.http) = {
            put: "/v1/reports/{id}"
            body: "*"
        };
    }
    // Update Reports
    rpc UpdateReports(UpdateReportsRequest) returns (UpdateReportsResponse){
        option (google.api.http) = {
            put: "/v1/reports"
            body: "*"
        };
    }
    // Delete Report
    rpc DeleteReport(DeleteReportRequest) returns (DeleteReportResponse){
        option (google.api.http) = {
            delete: "/v1/reports/{id}"
        };
    }
    // Delete Reports
    rpc DeleteReports(DeleteReportsRequest) returns (DeleteReportsResponse){
        option (google.api.http) = {
            delete: "/v1/reports"
        };
    }
    // Create User
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse){
        option (google.api.http) = {
            post: "/v1/users/{id}"
            body: "*"
        };
    }
    // Get Users
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse){
        option (google.api.http) = {
            get: "/v1/users"
        };
    }
    // Get User
    rpc GetUser(GetUserRequest) returns (GetUserResponse){
        option (google.api.http) = {
            get: "/v1/users/{id}"
        };
    }
    // Update User
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse){
        option (google.api.http) = {
            put: "/v1/users/{id}"
            body: "*"
        };
    }
    // Update Users
    rpc UpdateUsers(UpdateUsersRequest) returns (UpdateUsersResponse){
        option (google.api.http) = {
            put: "/v1/users"
            body: "*"
        };
    }
    // Delete User
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse){
        option (google.api.http) = {
            delete: "/v1/users/{id}"
        };
    }
    // Delete Users
    rpc DeleteUsers(DeleteUsersRequest) returns (DeleteUsersResponse){
        option (google.api.http) = {
            delete: "/v1/users"
        };
    }
    // Get Password Reset
    rpc GetPasswordReset(GetPasswordResetRequest) returns (GetPasswordResetResponse){
        option (google.api.http) = {
            get: "/v1/passwordreset"
        };
    }
    // Update Password
    rpc UpdatePassword(UpdatePasswordRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            put: "/v1/passwordreset/{userId}"
            body: "*"
        };
    }
    // Login
    rpc Login(LoginRequest) returns (LoginResponse){
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    }
    // Logout
    rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/logout"
        };
    }
    // Refresh
    rpc Refresh(google.protobuf.Empty) returns (RefreshResponse){
        option (google.api.http) = {
            post: "/v1/refresh"
            body: "*"
        };
    }
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string accessToken = 1;
    string refreshToken = 2;
    string displayName = 3;
    string role = 4;
    string id = 5;
}

message RefreshResponse {
    string accessToken = 1;
    string refreshToken = 2;
}

// covid payload
message Covid {
    string id = 1;
    string title = 2;
    int64 sid = 3;
    string image_feat_single = 4;
    string summary = 5;
    string date_pub2 = 6;
    string content = 7;
    string newsUrl = 8;
}

// district payload
message District {
    string name = 1;
    int64 total = 2;
}

// report payload
message Report {
    string id = 1;
    string userId = 2;
    int64 createdAt = 3;
    bool hasSymptom = 4;
    repeated bool results = 5;
}

// user payload
message User {
    // user id
    string id = 1;
    // user role: user
    string role = 2;
    // user email
    string email = 5;
    // user hashed password
    string password = 7;
    // lastUpdated time
    int64 lastUpdated = 8;
    // latitude
    double lat = 9;
    // longitude
    double long = 10;
    // time
    int64 time = 12;
    bool isActive = 13;
    string name = 14;
}

// get password reset request payload
message GetPasswordResetRequest {
    // user id
    string id = 1;
    // email
    string email = 2;
}

// get password reset request payload
message UpdatePasswordRequest {
    // user ID
    string userId = 1;
    // password
    string password = 2;
}

// get password reset response payload
message GetPasswordResetResponse {
    // password reset message
    string message = 1;
}

// get users request payload
message GetUsersRequest {
    // item to sort
    string item = 1;
    // order of item
    string order = 2;
    // pagination from
    int64 from = 3;
    // pagination to
    int64 to = 4;
    // item to filter
    string filterItem = 5;
    // value to filter
    string filterValue = 6;
    // user ids
    repeated string ids = 7;
}

// get user request payload
message GetUserRequest {
    // user id
    string id = 1;
}

// create user request payload
message CreateUserRequest {
    // user id
    string id = 1;
    // user payload
    User data = 2;
}

// update user request payload
message UpdateUserRequest {
    // user id
    string id = 1;
    // user payload
    User data = 2;
}

// update users request payload
message UpdateUsersRequest {
    // user ids
    repeated string ids = 1;
    // user payload
    User data = 2;
}

// delete user request payload
message DeleteUserRequest {
    // user id
    string id = 1;
}

// delete users request payload
message DeleteUsersRequest {
    // user ids
    repeated string ids = 1;
}

// delete user response payload
message DeleteUserResponse {
    // user payload
    User data = 1;
}

// get users response payload
message GetUsersResponse {
    // users payload
    repeated User data = 1;
    // total users
    int64 total = 2;
}

// get user response payload
message GetUserResponse {
    // user payload
    User data = 1;
}

// create user response payload
message CreateUserResponse {
    // user payload
    User data = 1;
}

// update user response payload
message UpdateUserResponse {
    // user payload
    User data = 1;
}

// update users response payload
message UpdateUsersResponse {
    // user ids
    repeated string data = 1;
}

// delete users response payload
message DeleteUsersResponse {
    // user ids
    repeated string data = 1;
}

// get nearby users request payload
message GetNearbyUsersRequest {
    // user
    User user = 1;
}

// get nearby users response payload
message GetNearbyUsersResponse {
    // list of users
    repeated User users = 1;
    // number of nearby users
    int64 userNum = 2;
}

message General {
    int64 totalConfirmed = 1;
    int64 activeCases = 2;
}

// get kases response payload
message GetKasesResponse {
    General data = 1;
}

// get recent kases response payload
message GetRecentKasesResponse {
    repeated Kase data = 1;
}

// ---------------- Covid -----------------

// get district request payload
message GetDistrictRequest {
    string id = 1;
}

// get district response payload
message GetDistrictResponse {
    // district payload
    District data = 1;
}

message Kase {
    string last_updated = 1;
    int64 new_deaths = 2;
    int64 new_infections = 3;
    int64 new_recovered = 4;
}

// ---------------- Covid -----------------

// get covids request payload
message GetCovidsRequest {
    // item to sort
    string item = 1;
    // order of item
    string order = 2;
    // pagination from
    int64 from = 3;
    // pagination to
    int64 to = 4;
    // item to filter
    string filterItem = 5;
    // value to filter
    string filterValue = 6;
    // covid ids
    repeated string ids = 7;
}

// get covid request payload
message GetCovidRequest {
    // covid id
    string id = 1;
}

// get covids response payload
message GetCovidsResponse {
    // covids payload
    repeated Covid data = 1;
    // total covids
    int64 total = 2;
}

// get covid response payload
message GetCovidResponse {
    // covid payload
    Covid data = 1;
}

// ---------------- Report -----------------

// get reports request payload
message GetReportsRequest {
    // item to sort
    string item = 1;
    // order of item
    string order = 2;
    // pagination from
    int64 from = 3;
    // pagination to
    int64 to = 4;
    // item to filter
    string filterItem = 5;
    // value to filter
    string filterValue = 6;
    // report ids
    repeated string ids = 7;
}

// get report request payload
message GetReportRequest {
    // report id
    string id = 1;
}

// create report request payload
message CreateReportRequest {
    // report id
    string id = 1;
    // report payload
    Report data = 2;
}

// update report request payload
message UpdateReportRequest {
    // report id
    string id = 1;
    // report payload
    Report data = 2;
}

// update reports request payload
message UpdateReportsRequest {
    // report ids
    repeated string ids = 1;
    // report payload
    Report data = 2;
}

// delete report request payload
message DeleteReportRequest {
    // report id
    string id = 1;
}

// delete reports request payload
message DeleteReportsRequest {
    // report ids
    repeated string ids = 1;
}

// delete report response payload
message DeleteReportResponse {
    // report payload
    Report data = 1;
}

// get reports response payload
message GetReportsResponse {
    // reports payload
    repeated Report data = 1;
    // total reports
    int64 total = 2;
}

// get report response payload
message GetReportResponse {
    // report payload
    Report data = 1;
}

// create report response payload
message CreateReportResponse {
    // report payload
    Report data = 1;
}

// update report response payload
message UpdateReportResponse {
    // report payload
    Report data = 1;
}

// update reports response payload
message UpdateReportsResponse {
    // report ids
    repeated string data = 1;
}

// delete reports response payload
message DeleteReportsResponse {
    // report ids
    repeated string data = 1;
}
